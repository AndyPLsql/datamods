% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import-globalenv.R
\name{import-globalenv}
\alias{import-globalenv}
\alias{import_globalenv_ui}
\alias{import_globalenv_server}
\title{Import data from Global Environment}
\usage{
import_globalenv_ui(id)

import_globalenv_server(
  id,
  choices = NULL,
  selected = NULL,
  trigger_return = c("button", "change")
)
}
\arguments{
\item{id}{Module's ID.}

\item{choices}{Character vector or \code{reactive} function
returning character vector of choices to use
if there's no \code{data.frame} in user's environment.}

\item{selected}{Default selected value, if any and if \code{choices} is provided.}

\item{trigger_return}{When to update selected data:
\code{"button"} (when user click on button) or
\code{"change"} (each time user select a dataset in the list).}
}
\value{
\itemize{
\item UI: HTML tags that can be included in shiny's UI
\item Server: a \code{list} with two slots:
\itemize{
\item \strong{data}: a \code{reactive} function returning the selected \code{data.frame}.
\item \strong{name}: a \code{reactive} function the name of the selected data as \code{character}.
}
}
}
\description{
Let the user select a dataset from its own environment.
}
\examples{

# Import data from Global Environment -------------------------------------

library(shiny)
library(datamods)

# Create some data.frames

my_df <- data.frame(
  variable1 = sample(letters, 20, TRUE),
  variable2 = sample(1:100, 20, TRUE)
)

results_analysis <- data.frame(
  id = sample(letters, 20, TRUE),
  measure = sample(1:100, 20, TRUE),
  response = sample(1:100, 20, TRUE)
)

data(mtcars)


# Application

ui <- fluidPage(
  tags$h3("Import data from Global Environment"),
  fluidRow(
    column(
      width = 4,
      import_globalenv_ui("myid")
    ),
    column(
      width = 8,
      tags$b("Imported data:"),
      verbatimTextOutput(outputId = "result")
    )
  )
)

server <- function(input, output, session) {

  imported <- import_globalenv_server("myid")

  output$result <- renderPrint({
    imported$data()
  })

}

if (interactive())
  shinyApp(ui, server)
}
