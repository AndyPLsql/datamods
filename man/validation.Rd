% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validation.R
\name{validation_ui}
\alias{validation_ui}
\alias{validation_server}
\title{Validation module}
\usage{
validation_ui(id, display = c("dropdown", "inline"), ...)

validation_server(
  id,
  data,
  n_row = NULL,
  n_col = NULL,
  n_row_label = "Valid number of rows",
  n_col_label = "Valid number of columns",
  btn_label = "Dataset validation:",
  rules = NULL
)
}
\arguments{
\item{id}{Module's ID.}

\item{display}{Display validation results in a dropdown menu
by clicking on a button or display results directly in interface.}

\item{...}{Arguments passed to \code{actionButton} or \code{uiOutput} depending on display mode,
you cannot use \code{inputId}/\code{outputId}, \code{label} or \code{icon} (button only).}

\item{data}{a \code{reactive} function returning a \code{data.frame}.}

\item{n_row, n_col}{A one-sided formula to check number of rows and columns respectively, see below for examples.}

\item{n_row_label, n_col_label}{Text to be displayed with the result of the check for number of rows/columns.}

\item{btn_label}{Label for the dropdown button, will be followed by validation result.}

\item{rules}{An object of class \code{validator} created with \code{validate::validator}.}
}
\value{
\itemize{
\item UI: HTML tags that can be included in shiny's UI
\item Server: a \code{list} with two slots:
\itemize{
\item \strong{status}: a \code{reactive} function returning the best status available.
\item \strong{details}: a \code{reactive} function returning a \code{list} with validation details.
}
}
}
\description{
Check that a dataset respect some validation expectations.
}
\examples{
library(datamods)
library(shiny)
library(validate)

ui <- fluidPage(
  tags$h2("Validation"),
  fluidRow(
    column(
      width = 4,
      radioButtons(
        inputId = "dataset",
        label = "Choose dataset:",
        choices = c("cars", "mtcars")
      ),
      validation_ui("validation")
    ),
    column(
      width = 8,
      tags$b("Status:"),
      verbatimTextOutput("status"),
      tags$b("Details:"),
      verbatimTextOutput("details")
    )
  )
)

server <- function(input, output, session) {

  dataset <- reactive({
    get(input$dataset)
  })

  results <- validation_server(
    id = "validation",
    data = dataset,
    n_row = ~ . > 20, # more than 20 rows
    n_col = ~ . >= 3, # at least 3 columns
    rules = validator(
      "disp exist" = !is.null(disp),
      is.numeric(disp),
      "mpg positive" = mpg > 0 # check that variable mpg is positive
    )
  )

  output$status <- renderPrint(results$status())
  output$details <- renderPrint(results$details())

}

if (interactive())
  shinyApp(ui, server)
}
